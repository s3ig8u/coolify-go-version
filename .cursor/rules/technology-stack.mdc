---
description: 
globs: 
alwaysApply: false
---
# Coolify Go Technology Stack

## Backend Framework

### **Go 1.21+** (Core Language)
- **Location**: [go.mod](mdc:go-src/go.mod)
- **Purpose**: High-performance backend implementation
- **Key Features**: 
  - Strong typing and compile-time safety
  - Concurrent programming with goroutines
  - Built-in HTTP server capabilities
  - Cross-platform compilation

### **HTTP Framework Options**
- **Gin** - High-performance HTTP web framework
- **Echo** - Fast and minimalist web framework
- **Gorilla Mux** - Powerful HTTP router and URL matcher
- **Chi** - Lightweight, expressive HTTP router

## Frontend Stack

### **Template Engine** (Server-Side Rendering)
- **Purpose**: Server-side HTML generation
- **Options**: 
  - `html/template` - Go's built-in template engine
  - `github.com/valyala/quicktemplate` - Fast template engine
  - `github.com/yuin/goldmark` - Markdown rendering

### **JavaScript Integration**
- **Purpose**: Client-side interactivity
- **Options**:
  - Vanilla JavaScript with Alpine.js-like patterns
  - HTMX for dynamic content updates
  - WebSocket for real-time features

### **CSS Framework**
- **Tailwind CSS** - Utility-first CSS framework
- **Configuration**: PostCSS with Tailwind
- **Extensions**:
  - `@tailwindcss/forms` - Form styling
  - `@tailwindcss/typography` - Content typography
  - `tailwind-scrollbar` - Custom scrollbars

## Database & Caching

### **PostgreSQL 15** (Primary Database)
- **Driver**: `github.com/lib/pq` or `github.com/jackc/pgx/v5`
- **ORM**: GORM (`gorm.io/gorm`) or SQLx (`github.com/jmoiron/sqlx`)
- **Purpose**: Main application data storage
- **Features**: JSONB support, advanced indexing, transactions

### **Redis 7** (Caching & Real-time)
- **Driver**: `github.com/go-redis/redis/v8` or `github.com/redis/go-redis/v9`
- **Purpose**: 
  - Session storage
  - Queue backend
  - Real-time data caching
  - WebSocket session management

### **Supported Databases** (For User Applications)
- **PostgreSQL**: Standalone PostgreSQL instances
- **MySQL**: Standalone MySQL instances
- **MariaDB**: Standalone MariaDB instances
- **MongoDB**: Standalone MongoDB instances
- **Redis**: Standalone Redis instances
- **KeyDB**: Standalone KeyDB instances
- **Dragonfly**: Standalone Dragonfly instances
- **ClickHouse**: Standalone ClickHouse instances

## Authentication & Security

### **JWT Authentication**
- **Package**: `github.com/golang-jwt/jwt/v4`
- **Purpose**: Stateless API authentication
- **Features**: Token-based authentication, refresh tokens

### **OAuth Integration**
- **Package**: `golang.org/x/oauth2`
- **Purpose**: OAuth provider integration
- **Providers**:
  - GitHub, GitLab, Google
  - Microsoft Azure, Authentik
  - Custom OAuth implementations

### **Password Hashing**
- **Package**: `golang.org/x/crypto/bcrypt`
- **Purpose**: Secure password storage
- **Features**: Adaptive hashing, salt generation

## Background Processing

### **Queue System**
- **Backend**: Redis-based queues
- **Worker**: Custom goroutine-based workers
- **Processing**: Background deployment and monitoring tasks
- **Packages**: `github.com/hibiken/asynq` or custom implementation

### **Job Processing**
```go
// Example job structure
type DeploymentJob struct {
    ApplicationID string    `json:"application_id"`
    TriggeredBy   string    `json:"triggered_by"`
    GitCommitHash string    `json:"git_commit_hash"`
    Force         bool      `json:"force"`
    CreatedAt     time.Time `json:"created_at"`
}

// Job processor
type JobProcessor struct {
    redis *redis.Client
    db    *gorm.DB
}

func (jp *JobProcessor) ProcessDeployment(job *DeploymentJob) error {
    // Background deployment logic
    return nil
}
```

## Development Tools

### **Build Tools**
- **Go Modules**: Dependency management
- **Air**: Live reload for development
- **Task**: Task runner for build automation

### **Code Quality**
- **golangci-lint**: Comprehensive linter
- **go fmt**: Code formatting
- **go vet**: Static analysis
- **go test**: Unit testing framework

### **Testing Framework**
- **Go Testing**: Built-in testing framework
- **Testify**: Testing utilities and assertions
- **Gomock**: Mock generation
- **Testcontainers**: Integration testing with containers

## External Integrations

### **Git Providers**
- **GitHub**: Repository integration and webhooks
- **GitLab**: Self-hosted and cloud GitLab support
- **Bitbucket**: Atlassian integration
- **Gitea**: Self-hosted Git service

### **Cloud Storage**
- **AWS S3**: `github.com/aws/aws-sdk-go-v2`
- **SFTP**: `github.com/pkg/sftp`
- **Local Storage**: File system integration

### **Notification Services**
- **Email**: `github.com/go-gomail/gomail`
- **Discord**: Custom webhook integration
- **Slack**: Webhook notifications
- **Telegram**: Bot API integration
- **Pushover**: Push notifications

### **Monitoring & Logging**
- **Sentry**: `github.com/getsentry/sentry-go` - Error tracking
- **Zap**: `go.uber.org/zap` - Structured logging
- **Prometheus**: `github.com/prometheus/client_golang` - Metrics

## DevOps & Infrastructure

### **Docker & Containerization**
- **Docker**: `github.com/docker/docker/client` - Container runtime
- **Docker Compose**: Multi-container orchestration
- **Docker Swarm**: Container clustering (optional)

### **Web Servers & Proxies**
- **Nginx**: Primary web server
- **Traefik**: Reverse proxy and load balancer
- **Caddy**: Alternative reverse proxy

### **Process Management**
- **Systemd**: Process supervisor
- **Supervisor**: Alternative process manager

### **SSL/TLS**
- **Let's Encrypt**: Automatic SSL certificates
- **Custom Certificates**: Manual SSL management

## Terminal & Code Editing

### **XTerm.js Integration**
- **Purpose**: Web-based terminal emulator
- **Features**: SSH session management, real-time command execution
- **Integration**: WebSocket-based terminal communication

### **Code Editor**
- **Purpose**: Code editor component
- **Features**: Syntax highlighting, auto-completion
- **Integration**: Environment variable editing, configuration files

## API & Documentation

### **OpenAPI/Swagger**
- **Documentation**: OpenAPI 3.0 specification
- **Generator**: `github.com/swaggo/swag`
- **API Routes**: RESTful API endpoints

### **WebSocket Communication**
- **Gorilla WebSocket**: `github.com/gorilla/websocket`
- **Real-time Updates**: Live deployment status, logs, monitoring

## Package Management

### **Go Dependencies** ([go.mod](mdc:go-src/go.mod))
```go
module coolify-go

go 1.21

require (
    github.com/gin-gonic/gin v1.9.1
    github.com/go-redis/redis/v8 v8.11.5
    github.com/golang-jwt/jwt/v4 v4.5.0
    github.com/lib/pq v1.10.9
    gorm.io/gorm v1.25.5
    gorm.io/driver/postgres v1.5.4
    github.com/docker/docker v24.0.7
    golang.org/x/crypto v0.17.0
    golang.org/x/oauth2 v0.15.0
)
```

## Architecture Patterns

### **Clean Architecture**
```
├── cmd/                    # Application entry points
├── internal/               # Private application code
│   ├── auth/              # Authentication logic
│   ├── models/            # Data models
│   ├── handlers/          # HTTP handlers
│   ├── services/          # Business logic
│   └── repository/        # Data access layer
├── pkg/                   # Public packages
├── web/                   # Static assets and templates
└── migrations/            # Database migrations
```

### **Dependency Injection**
```go
// Service container pattern
type Container struct {
    DB          *gorm.DB
    Redis       *redis.Client
    AuthService *AuthService
    UserService *UserService
}

// Dependency injection
func NewContainer(config *Config) *Container {
    db := initDatabase(config)
    redis := initRedis(config)
    
    return &Container{
        DB:          db,
        Redis:       redis,
        AuthService: NewAuthService(db, redis),
        UserService: NewUserService(db),
    }
}
```

### **Middleware Pattern**
```go
// HTTP middleware
func AuthMiddleware(authService *AuthService) gin.HandlerFunc {
    return func(c *gin.Context) {
        token := c.GetHeader("Authorization")
        if token == "" {
            c.JSON(401, gin.H{"error": "Unauthorized"})
            c.Abort()
            return
        }
        
        user, err := authService.ValidateToken(token)
        if err != nil {
            c.JSON(401, gin.H{"error": "Invalid token"})
            c.Abort()
            return
        }
        
        c.Set("user", user)
        c.Next()
    }
}
```