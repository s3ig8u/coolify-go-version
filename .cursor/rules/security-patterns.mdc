---
description: 
globs: 
alwaysApply: false
---
# Coolify Go Security Architecture & Patterns

## Security Philosophy

Coolify Go implements **defense-in-depth security** with multiple layers of protection including authentication, authorization, encryption, network isolation, and secure deployment practices using Go's security features and best practices.

## Authentication Architecture

### Multi-Provider Authentication
- **JWT Authentication** - `github.com/golang-jwt/jwt/v4` for stateless API authentication
- **OAuth Integration** - `golang.org/x/oauth2` for OAuth provider integration
- **Password Hashing** - `golang.org/x/crypto/bcrypt` for secure password storage
- **Session Management** - Redis-based session storage

### OAuth Integration
- **[OauthSetting](mdc:internal/models/oauth_setting.go)** - OAuth provider configurations
- **Supported Providers**:
  - Google OAuth
  - Microsoft Azure AD
  - Authentik
  - GitHub (via GitHub Apps)
  - GitLab

### Authentication Models
```go
// User authentication with team-based access
type User struct {
    BaseModel
    Name                string     `json:"name" gorm:"not null"`
    Email               string     `json:"email" gorm:"uniqueIndex;not null"`
    Password            string     `json:"-" gorm:"not null"` // Hidden from JSON
    EmailVerifiedAt     *time.Time `json:"email_verified_at"`
    CurrentTeamID       *uuid.UUID `json:"current_team_id"`
    LastLoginAt         *time.Time `json:"last_login_at"`
    
    // Relationships
    Teams               []TeamMember `json:"teams" gorm:"foreignKey:UserID"`
    CurrentTeam         *Team        `json:"current_team" gorm:"foreignKey:CurrentTeamID"`
    PersonalAccessTokens []PersonalAccessToken `json:"personal_access_tokens" gorm:"foreignKey:UserID"`
}

// Team membership with roles
type TeamMember struct {
    BaseModel
    UserID   uuid.UUID `json:"user_id" gorm:"not null"`
    TeamID   uuid.UUID `json:"team_id" gorm:"not null"`
    Role     string    `json:"role" gorm:"default:'member'"`
    JoinedAt time.Time `json:"joined_at" gorm:"autoCreateTime"`
    
    // Relationships
    User     User      `json:"user" gorm:"foreignKey:UserID"`
    Team     Team      `json:"team" gorm:"foreignKey:TeamID"`
}

// Personal access token for API authentication
type PersonalAccessToken struct {
    BaseModel
    UserID    uuid.UUID  `json:"user_id" gorm:"not null"`
    Name      string     `json:"name" gorm:"not null"`
    Token     string     `json:"token" gorm:"uniqueIndex;not null"`
    Abilities []string   `json:"abilities" gorm:"type:jsonb"`
    ExpiresAt *time.Time `json:"expires_at"`
    LastUsedAt *time.Time `json:"last_used_at"`
    
    // Relationships
    User      User       `json:"user" gorm:"foreignKey:UserID"`
}

// Authentication methods
func (u *User) SetPassword(password string) error {
    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
    if err != nil {
        return err
    }
    u.Password = string(hashedPassword)
    return nil
}

func (u *User) CheckPassword(password string) bool {
    err := bcrypt.CompareHashAndPassword([]byte(u.Password), []byte(password))
    return err == nil
}

func (u *User) HasTeamAccess(teamID uuid.UUID) bool {
    for _, member := range u.Teams {
        if member.TeamID == teamID {
            return true
        }
    }
    return false
}

func (u *User) HasTeamRole(teamID uuid.UUID, role string) bool {
    for _, member := range u.Teams {
        if member.TeamID == teamID && member.Role == role {
            return true
        }
    }
    return false
}
```

## Authorization & Access Control

### Team-Based Multi-Tenancy
- **[Team](mdc:internal/models/team.go)** - Multi-tenant organization structure
- **[TeamInvitation](mdc:internal/models/team_invitation.go)** - Secure team collaboration
- **Role-based permissions** within teams
- **Resource isolation** by team ownership

### Authorization Patterns
```go
// Team-scoped authorization middleware
func TeamAccessMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        user := c.MustGet("user").(*User)
        teamID := c.Param("teamId")
        
        if !user.HasTeamAccess(teamID) {
            c.JSON(403, gin.H{"error": "Access denied to team resources"})
            c.Abort()
            return
        }
        
        // Set current team context
        c.Set("teamId", teamID)
        c.Next()
    }
}

// Resource-level authorization
type ApplicationPolicy struct{}

func (p *ApplicationPolicy) CanView(user *User, app *Application) bool {
    return user.HasTeamAccess(app.TeamID)
}

func (p *ApplicationPolicy) CanDeploy(user *User, app *Application) bool {
    return p.CanView(user, app) && 
           user.HasTeamRole(app.TeamID, "admin") || 
           user.HasTeamRole(app.TeamID, "deployer")
}

func (p *ApplicationPolicy) CanDelete(user *User, app *Application) bool {
    return p.CanView(user, app) && 
           user.HasTeamRole(app.TeamID, "admin")
}

// Authorization service
type AuthorizationService struct {
    policies map[string]interface{}
}

func NewAuthorizationService() *AuthorizationService {
    return &AuthorizationService{
        policies: map[string]interface{}{
            "application": &ApplicationPolicy{},
            "server":      &ServerPolicy{},
            "database":    &DatabasePolicy{},
        },
    }
}

func (s *AuthorizationService) Can(user *User, action string, resource interface{}) bool {
    // Get appropriate policy based on resource type
    policy := s.getPolicy(resource)
    if policy == nil {
        return false
    }
    
    // Call policy method
    method := reflect.ValueOf(policy).MethodByName("Can" + strings.Title(action))
    if !method.IsValid() {
        return false
    }
    
    result := method.Call([]reflect.Value{
        reflect.ValueOf(user),
        reflect.ValueOf(resource),
    })
    
    return result[0].Bool()
}
```

### Global Scopes for Data Isolation
```go
// Team-based query scoping
func (a *Application) ScopeByTeam(db *gorm.DB, teamID uuid.UUID) *gorm.DB {
    return db.
        Joins("JOIN environments ON applications.environment_id = environments.id").
        Joins("JOIN projects ON environments.project_id = projects.id").
        Where("projects.team_id = ?", teamID)
}

// Repository with automatic team filtering
type GORMApplicationRepository struct {
    db *gorm.DB
}

func (r *GORMApplicationRepository) GetByTeam(ctx context.Context, teamID uuid.UUID) ([]*Application, error) {
    var apps []*Application
    err := r.db.WithContext(ctx).Scopes(Application{}.ScopeByTeam(r.db, teamID)).Find(&apps).Error
    return apps, err
}
```

## API Security

### JWT Token-Based Authentication
```go
// JWT service for token management
type JWTService struct {
    secretKey []byte
    issuer    string
    duration  time.Duration
}

func NewJWTService(secretKey string, issuer string, duration time.Duration) *JWTService {
    return &JWTService{
        secretKey: []byte(secretKey),
        issuer:    issuer,
        duration:  duration,
    }
}

func (s *JWTService) GenerateToken(user *User) (string, error) {
    claims := jwt.RegisteredClaims{
        Subject:   user.ID.String(),
        Issuer:    s.issuer,
        IssuedAt:  jwt.NewNumericDate(time.Now()),
        ExpiresAt: jwt.NewNumericDate(time.Now().Add(s.duration)),
        NotBefore: jwt.NewNumericDate(time.Now()),
    }
    
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
    return token.SignedString(s.secretKey)
}

func (s *JWTService) ValidateToken(tokenString string) (*jwt.RegisteredClaims, error) {
    token, err := jwt.ParseWithClaims(tokenString, &jwt.RegisteredClaims{}, func(token *jwt.Token) (interface{}, error) {
        if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
            return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
        }
        return s.secretKey, nil
    })
    
    if err != nil {
        return nil, err
    }
    
    if claims, ok := token.Claims.(*jwt.RegisteredClaims); ok && token.Valid {
        return claims, nil
    }
    
    return nil, fmt.Errorf("invalid token")
}

// JWT authentication middleware
func JWTAuthMiddleware(authService *AuthService) gin.HandlerFunc {
    return func(c *gin.Context) {
        token := c.GetHeader("Authorization")
        if token == "" {
            c.JSON(401, gin.H{"error": "Authorization header required"})
            c.Abort()
            return
        }
        
        // Remove "Bearer " prefix
        if strings.HasPrefix(token, "Bearer ") {
            token = token[7:]
        }
        
        user, err := authService.ValidateToken(token)
        if err != nil {
            c.JSON(401, gin.H{"error": "Invalid token"})
            c.Abort()
            return
        }
        
        c.Set("user", user)
        c.Next()
    }
}
```

### API Rate Limiting
```go
// Rate limiting middleware using golang.org/x/time/rate
func RateLimitMiddleware(limit int, window time.Duration) gin.HandlerFunc {
    limiter := rate.NewLimiter(rate.Every(window/time.Duration(limit)), limit)
    
    return func(c *gin.Context) {
        if !limiter.Allow() {
            c.JSON(429, gin.H{"error": "Rate limit exceeded"})
            c.Abort()
            return
        }
        c.Next()
    }
}

// Different rate limits for different endpoints
func SetupRateLimiting(r *gin.Engine) {
    // API rate limiting
    apiGroup := r.Group("/api")
    apiGroup.Use(RateLimitMiddleware(60, time.Minute)) // 60 requests per minute
    
    // Deployment rate limiting
    deploymentGroup := r.Group("/api/deployments")
    deploymentGroup.Use(RateLimitMiddleware(10, time.Minute)) // 10 deployments per minute
    
    // Webhook rate limiting
    webhookGroup := r.Group("/webhooks")
    webhookGroup.Use(RateLimitMiddleware(100, time.Minute)) // 100 webhooks per minute
}
```

### API Input Validation
```go
// Request validation with struct tags
type CreateApplicationRequest struct {
    Name              string            `json:"name" binding:"required,min=2,max=100,alphanum"`
    Description       string            `json:"description" binding:"max=500"`
    GitRepository     string            `json:"git_repository" binding:"required,url,startswith=https://"`
    GitBranch         string            `json:"git_branch" binding:"required,min=1,max=100,alphanumdash"`
    BuildPack         string            `json:"build_pack" binding:"required,oneof=nodejs python php ruby java go rust"`
    Port              int               `json:"port" binding:"required,min=1,max=65535"`
    ServerID          string            `json:"server_id" binding:"required,uuid"`
    EnvironmentVars   map[string]string `json:"environment_variables" binding:"max=100"`
}

// Custom validation
func (r *CreateApplicationRequest) Validate() error {
    // Custom validation logic
    if !strings.HasPrefix(r.GitRepository, "https://") {
        return errors.New("Git repository must use HTTPS")
    }
    
    if r.Port < 1 || r.Port > 65535 {
        return errors.New("Port must be between 1 and 65535")
    }
    
    // Validate environment variable names
    for key := range r.EnvironmentVars {
        if !isValidEnvVarName(key) {
            return fmt.Errorf("invalid environment variable name: %s", key)
        }
    }
    
    return nil
}

func isValidEnvVarName(name string) bool {
    if len(name) == 0 {
        return false
    }
    
    // Environment variable names must start with a letter or underscore
    if !unicode.IsLetter(rune(name[0])) && name[0] != '_' {
        return false
    }
    
    // And contain only letters, digits, and underscores
    for _, char := range name {
        if !unicode.IsLetter(char) && !unicode.IsDigit(char) && char != '_' {
            return false
        }
    }
    
    return true
}

// Handler with validation
func (h *ApplicationHandler) Create(c *gin.Context) {
    var req CreateApplicationRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        c.JSON(400, gin.H{"error": "Invalid request data", "details": err.Error()})
        return
    }
    
    // Custom validation
    if err := req.Validate(); err != nil {
        c.JSON(400, gin.H{"error": err.Error()})
        return
    }
    
    user := c.MustGet("user").(*User)
    app, err := h.service.CreateApplication(c.Request.Context(), &req, user.ID)
    if err != nil {
        c.JSON(500, gin.H{"error": err.Error()})
        return
    }
    
    c.JSON(201, gin.H{"data": app})
}
```

## Data Protection & Encryption

### Environment Variable Encryption
```go
// Encrypted environment variable storage
type EnvironmentVariable struct {
    BaseModel
    ApplicationID uuid.UUID `json:"application_id" gorm:"not null"`
    Key           string    `json:"key" gorm:"not null"`
    Value         string    `json:"value" gorm:"not null"`
    IsEncrypted   bool      `json:"is_encrypted" gorm:"default:false"`
    
    // Relationships
    Application   Application `json:"application" gorm:"foreignKey:ApplicationID"`
}

// Encryption service
type EncryptionService struct {
    key []byte
}

func NewEncryptionService(key string) *EncryptionService {
    return &EncryptionService{key: []byte(key)}
}

func (s *EncryptionService) Encrypt(data string) (string, error) {
    block, err := aes.NewCipher(s.key)
    if err != nil {
        return "", err
    }
    
    gcm, err := cipher.NewGCM(block)
    if err != nil {
        return "", err
    }
    
    nonce := make([]byte, gcm.NonceSize())
    if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
        return "", err
    }
    
    ciphertext := gcm.Seal(nonce, nonce, []byte(data), nil)
    return base64.StdEncoding.EncodeToString(ciphertext), nil
}

func (s *EncryptionService) Decrypt(encryptedData string) (string, error) {
    data, err := base64.StdEncoding.DecodeString(encryptedData)
    if err != nil {
        return "", err
    }
    
    block, err := aes.NewCipher(s.key)
    if err != nil {
        return "", err
    }
    
    gcm, err := cipher.NewGCM(block)
    if err != nil {
        return "", err
    }
    
    nonceSize := gcm.NonceSize()
    if len(data) < nonceSize {
        return "", errors.New("ciphertext too short")
    }
    
    nonce, ciphertext := data[:nonceSize], data[nonceSize:]
    plaintext, err := gcm.Open(nil, nonce, ciphertext, nil)
    if err != nil {
        return "", err
    }
    
    return string(plaintext), nil
}

// Environment variable methods
func (ev *EnvironmentVariable) SetValue(value string, encrypt bool, encryptionService *EncryptionService) error {
    if encrypt {
        encrypted, err := encryptionService.Encrypt(value)
        if err != nil {
            return err
        }
        ev.Value = encrypted
        ev.IsEncrypted = true
    } else {
        ev.Value = value
        ev.IsEncrypted = false
    }
    return nil
}

func (ev *EnvironmentVariable) GetValue(encryptionService *EncryptionService) (string, error) {
    if ev.IsEncrypted {
        return encryptionService.Decrypt(ev.Value)
    }
    return ev.Value, nil
}
```

### SSH Key Management
```go
// Secure SSH key storage
type PrivateKey struct {
    BaseModel
    Name        string    `json:"name" gorm:"not null"`
    PrivateKey  string    `json:"private_key" gorm:"not null"`
    PublicKey   string    `json:"public_key" gorm:"not null"`
    IsEncrypted bool      `json:"is_encrypted" gorm:"default:true"`
    TeamID      uuid.UUID `json:"team_id" gorm:"not null"`
    
    // Relationships
    Team        Team      `json:"team" gorm:"foreignKey:TeamID"`
    Servers     []Server  `json:"servers" gorm:"foreignKey:SSHKeyID"`
}

// SSH key service
type SSHKeyService struct {
    encryptionService *EncryptionService
}

func NewSSHKeyService(encryptionService *EncryptionService) *SSHKeyService {
    return &SSHKeyService{encryptionService: encryptionService}
}

func (s *SSHKeyService) GenerateKeyPair(name string) (*PrivateKey, error) {
    // Generate RSA key pair
    privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
    if err != nil {
        return nil, err
    }
    
    // Encode private key
    privateKeyPEM := &pem.Block{
        Type:  "RSA PRIVATE KEY",
        Bytes: x509.MarshalPKCS1PrivateKey(privateKey),
    }
    privateKeyBytes := pem.EncodeToMemory(privateKeyPEM)
    
    // Encode public key
    publicKey, err := ssh.NewPublicKey(&privateKey.PublicKey)
    if err != nil {
        return nil, err
    }
    publicKeyBytes := ssh.MarshalAuthorizedKey(publicKey)
    
    // Encrypt private key
    encryptedPrivateKey, err := s.encryptionService.Encrypt(string(privateKeyBytes))
    if err != nil {
        return nil, err
    }
    
    return &PrivateKey{
        Name:        name,
        PrivateKey:  encryptedPrivateKey,
        PublicKey:   string(publicKeyBytes),
        IsEncrypted: true,
    }, nil
}

func (s *SSHKeyService) DecryptPrivateKey(key *PrivateKey) (string, error) {
    if !key.IsEncrypted {
        return key.PrivateKey, nil
    }
    return s.encryptionService.Decrypt(key.PrivateKey)
}
```

## Network Security

### HTTPS/TLS Configuration
```go
// TLS configuration for secure connections
type TLSConfig struct {
    CertFile string `json:"cert_file"`
    KeyFile  string `json:"key_file"`
    MinTLS   string `json:"min_tls" default:"1.2"`
}

func (c *TLSConfig) GetTLSConfig() (*tls.Config, error) {
    cert, err := tls.LoadX509KeyPair(c.CertFile, c.KeyFile)
    if err != nil {
        return nil, err
    }
    
    return &tls.Config{
        Certificates: []tls.Certificate{cert},
        MinVersion:   tls.VersionTLS12,
        CipherSuites: []uint16{
            tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
            tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
            tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
            tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
        },
    }, nil
}

// Secure server setup
func setupSecureServer(config *Config) (*http.Server, error) {
    tlsConfig, err := config.TLS.GetTLSConfig()
    if err != nil {
        return nil, err
    }
    
    server := &http.Server{
        Addr:      config.Server.Addr,
        TLSConfig: tlsConfig,
        // Security headers
        Handler: addSecurityHeaders(http.DefaultServeMux),
    }
    
    return server, nil
}

func addSecurityHeaders(handler http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Security headers
        w.Header().Set("X-Content-Type-Options", "nosniff")
        w.Header().Set("X-Frame-Options", "DENY")
        w.Header().Set("X-XSS-Protection", "1; mode=block")
        w.Header().Set("Strict-Transport-Security", "max-age=31536000; includeSubDomains")
        w.Header().Set("Content-Security-Policy", "default-src 'self'")
        w.Header().Set("Referrer-Policy", "strict-origin-when-cross-origin")
        
        handler.ServeHTTP(w, r)
    })
}
```

### CORS Configuration
```go
// CORS middleware for API access
func CORSMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        c.Header("Access-Control-Allow-Origin", "*")
        c.Header("Access-Control-Allow-Credentials", "true")
        c.Header("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
        c.Header("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, DELETE")
        
        if c.Request.Method == "OPTIONS" {
            c.AbortWithStatus(204)
            return
        }
        
        c.Next()
    }
}
```

## Audit Logging

### Activity Logging
```go
// Activity log model
type ActivityLog struct {
    BaseModel
    UserID       uuid.UUID              `json:"user_id"`
    TeamID       *uuid.UUID             `json:"team_id"`
    Action       string                 `json:"action" gorm:"not null"`
    ResourceType string                 `json:"resource_type"`
    ResourceID   *uuid.UUID             `json:"resource_id"`
    Description  string                 `json:"description"`
    Properties   datatypes.JSON         `json:"properties"`
    IPAddress    string                 `json:"ip_address"`
    UserAgent    string                 `json:"user_agent"`
    
    // Relationships
    User         User                   `json:"user" gorm:"foreignKey:UserID"`
    Team         *Team                  `json:"team" gorm:"foreignKey:TeamID"`
}

// Activity logging service
type ActivityLogService struct {
    db *gorm.DB
}

func NewActivityLogService(db *gorm.DB) *ActivityLogService {
    return &ActivityLogService{db: db}
}

func (s *ActivityLogService) Log(ctx context.Context, userID uuid.UUID, action string, resourceType string, resourceID *uuid.UUID, description string, properties map[string]interface{}) error {
    log := &ActivityLog{
        UserID:       userID,
        Action:       action,
        ResourceType: resourceType,
        ResourceID:   resourceID,
        Description:  description,
        Properties:   properties,
    }
    
    // Extract IP and User-Agent from context
    if req, ok := ctx.Value("request").(*http.Request); ok {
        log.IPAddress = getClientIP(req)
        log.UserAgent = req.UserAgent()
    }
    
    return s.db.WithContext(ctx).Create(log).Error
}

func getClientIP(req *http.Request) string {
    // Check for forwarded headers
    if ip := req.Header.Get("X-Forwarded-For"); ip != "" {
        return strings.Split(ip, ",")[0]
    }
    if ip := req.Header.Get("X-Real-IP"); ip != "" {
        return ip
    }
    return req.RemoteAddr
}

// Middleware for automatic logging
func ActivityLogMiddleware(activityService *ActivityLogService) gin.HandlerFunc {
    return func(c *gin.Context) {
        // Store request in context for logging
        c.Set("request", c.Request)
        
        c.Next()
        
        // Log the request
        if user, exists := c.Get("user"); exists {
            userID := user.(*User).ID
            action := c.Request.Method + " " + c.Request.URL.Path
            
            go func() {
                activityService.Log(c.Request.Context(), userID, action, "", nil, "", nil)
            }()
        }
    }
}
```

## Security Headers & CSP

### Content Security Policy
```go
// CSP configuration
type CSPConfig struct {
    DefaultSrc []string `json:"default_src" default:"['self']"`
    ScriptSrc  []string `json:"script_src" default:"['self','unsafe-inline']"`
    StyleSrc   []string `json:"style_src" default:"['self','unsafe-inline']"`
    ImgSrc     []string `json:"img_src" default:"['self','data:','https:']"`
    ConnectSrc []string `json:"connect_src" default:"['self']"`
    FontSrc    []string `json:"font_src" default:"['self']"`
    ObjectSrc  []string `json:"object_src" default:"['none']"`
    MediaSrc   []string `json:"media_src" default:"['self']"`
    FrameSrc   []string `json:"frame_src" default:"['none']"`
}

func (c *CSPConfig) GetPolicy() string {
    policy := []string{}
    
    if len(c.DefaultSrc) > 0 {
        policy = append(policy, fmt.Sprintf("default-src %s", strings.Join(c.DefaultSrc, " ")))
    }
    if len(c.ScriptSrc) > 0 {
        policy = append(policy, fmt.Sprintf("script-src %s", strings.Join(c.ScriptSrc, " ")))
    }
    if len(c.StyleSrc) > 0 {
        policy = append(policy, fmt.Sprintf("style-src %s", strings.Join(c.StyleSrc, " ")))
    }
    if len(c.ImgSrc) > 0 {
        policy = append(policy, fmt.Sprintf("img-src %s", strings.Join(c.ImgSrc, " ")))
    }
    if len(c.ConnectSrc) > 0 {
        policy = append(policy, fmt.Sprintf("connect-src %s", strings.Join(c.ConnectSrc, " ")))
    }
    if len(c.FontSrc) > 0 {
        policy = append(policy, fmt.Sprintf("font-src %s", strings.Join(c.FontSrc, " ")))
    }
    if len(c.ObjectSrc) > 0 {
        policy = append(policy, fmt.Sprintf("object-src %s", strings.Join(c.ObjectSrc, " ")))
    }
    if len(c.MediaSrc) > 0 {
        policy = append(policy, fmt.Sprintf("media-src %s", strings.Join(c.MediaSrc, " ")))
    }
    if len(c.FrameSrc) > 0 {
        policy = append(policy, fmt.Sprintf("frame-src %s", strings.Join(c.FrameSrc, " ")))
    }
    
    return strings.Join(policy, "; ")
}
```

## Security Testing

### Security Test Patterns
```go
// Security testing examples
func TestAuthentication_Security(t *testing.T) {
    tests := []struct {
        name        string
        password    string
        expectError bool
    }{
        {"weak password", "123", true},
        {"strong password", "StrongP@ssw0rd!", false},
        {"empty password", "", true},
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            user := &User{}
            err := user.SetPassword(tt.password)
            
            if tt.expectError {
                assert.Error(t, err)
            } else {
                assert.NoError(t, err)
                assert.True(t, user.CheckPassword(tt.password))
            }
        })
    }
}

func TestAuthorization_Security(t *testing.T) {
    user := &User{BaseModel: models.BaseModel{ID: uuid.New()}}
    teamID := uuid.New()
    
    // User should not have access to team by default
    assert.False(t, user.HasTeamAccess(teamID))
    
    // Add user to team
    user.Teams = []TeamMember{
        {TeamID: teamID, Role: "member"},
    }
    
    // User should now have access
    assert.True(t, user.HasTeamAccess(teamID))
    assert.True(t, user.HasTeamRole(teamID, "member"))
    assert.False(t, user.HasTeamRole(teamID, "admin"))
}
```
