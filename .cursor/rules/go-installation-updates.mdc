---
description:
globs:
alwaysApply: false
---
# Coolify Go Installation & Updates

## Installation Philosophy

Coolify Go follows a **registry-first deployment strategy** with source-build fallback, ensuring reliable installation across different environments and network conditions.

## Core Installation Components

### Installation Scripts
- **[install.sh](mdc:go-src/install.sh)** - Primary installation script with registry fallback
- **[update.sh](mdc:go-src/update.sh)** - Automated update process with backup
- **[test-install.sh](mdc:go-src/test-install.sh)** - Installation testing and validation

### Build & Deployment Scripts
- **[scripts/build.sh](mdc:go-src/scripts/build.sh)** - Multi-platform binary builds
- **[scripts/deploy.sh](mdc:go-src/scripts/deploy.sh)** - Environment-specific deployments
- **[scripts/release.sh](mdc:go-src/scripts/release.sh)** - Release artifact creation

## Installation Architecture

### Registry-First Strategy
```bash
# âœ… DO: Try registry first, fallback to source build
REGISTRY="shrtso.azurecr.io/coolify-go"
if docker pull "$REGISTRY:latest"; then
    USE_REGISTRY_IMAGE="$REGISTRY_IMAGE"
else
    # Fallback to source build
    git clone "$GITHUB_REPO" && docker build -t coolify-go:latest .
fi
```

### Multi-Platform Support
```bash
# âœ… DO: Build for all target platforms
PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
for platform in $PLATFORMS; do
    GOOS=${platform%/*}
    GOARCH=${platform#*/}
    env GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build \
        -ldflags="-X main.Version=$VERSION" \
        -o "dist/coolify-go-$VERSION-$GOOS-$GOARCH" .
done
```

### Docker Multi-Stage Build
```dockerfile
# âœ… DO: Use multi-stage builds for minimal images
FROM golang:1.21-alpine AS builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o coolify-go .

FROM alpine:latest
RUN apk --no-cache add ca-certificates curl
WORKDIR /root/
COPY --from=builder /app/coolify-go .
EXPOSE 8080
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1
CMD ["./coolify-go"]
```

## Installation Workflow

### 1. Environment Detection
```bash
# âœ… DO: Detect platform and architecture
OS_TYPE=$(grep -w "ID" /etc/os-release | cut -d "=" -f 2 | tr -d '"')
ARCH=$(uname -m)
case $ARCH in
    x86_64) ARCH="amd64" ;;
    arm64|aarch64) ARCH="arm64" ;;
    *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
esac
```

### 2. Dependency Installation
```bash
# âœ… DO: Install Docker using official method
curl -fsSL https://get.docker.com | sh
systemctl enable docker
systemctl start docker

# âœ… DO: Install docker-compose with fallback
if command -v apt-get >/dev/null 2>&1; then
    apt-get install -y docker-compose-plugin || {
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
    }
fi
```

### 3. Configuration Generation
```bash
# âœ… DO: Generate secure passwords and secrets
DB_PASS=$(openssl rand -hex 16)
REDIS_PASS=$(openssl rand -hex 16)
JWT_SECRET=$(openssl rand -hex 32)

# âœ… DO: Create environment file
cat > /data/coolify-go/.env << EOF
APP_NAME=Coolify-Go
APP_ENV=production
APP_PORT=8080
DB_HOST=postgres
DB_PORT=5432
DB_NAME=coolify_go
DB_USER=coolify_go
DB_PASSWORD=${DB_PASS}
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=${REDIS_PASS}
JWT_SECRET=${JWT_SECRET}
EOF
```

### 4. Service Orchestration
```yaml
# âœ… DO: Use docker-compose for service orchestration
version: '3.8'
services:
  coolify-go:
    image: ${REGISTRY_IMAGE}
    container_name: coolify-go
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /data/coolify-go:/data
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: coolify_go
      POSTGRES_USER: coolify_go
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
```

## Update Process

### 1. Backup Strategy
```bash
# âœ… DO: Create comprehensive backups before updates
BACKUP_DIR="/data/coolify-go/backups/$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Database backup
docker exec coolify-go-db pg_dump -U coolify_go coolify_go > "$BACKUP_DIR/database.sql"

# Configuration backup
cp /data/coolify-go/.env "$BACKUP_DIR/"
cp /data/coolify-go/docker-compose.yml "$BACKUP_DIR/"
```

### 2. Zero-Downtime Updates
```bash
# âœ… DO: Use rolling updates for zero downtime
# Stop old container
docker stop coolify-go
docker rm coolify-go

# Start new container
docker run -d \
    --name coolify-go \
    --restart unless-stopped \
    -p 8080:8080 \
    "coolify-go:$NEW_VERSION"

# Wait for health check
for i in {1..30}; do
    if curl -sf http://localhost:8080/health > /dev/null; then
        echo "Health check passed!"
        break
    fi
    sleep 2
done
```

### 3. Version Management
```go
// âœ… DO: Embed version information in binary
const (
    Version   = "v1.4.0"
    BuildTime = "2025-01-20T10:11:00Z"
    GitCommit = "abc123def"
)

func printVersion() {
    fmt.Printf("Coolify Go v%s (built %s, commit %s)\n", Version, BuildTime, GitCommit)
}
```

## Development Installation

### Local Development Setup
```bash
# âœ… DO: Use Makefile for development commands
make dev          # Run with live reload
make build        # Build binary
make test         # Run tests
make docker       # Build Docker image
make compose-up   # Start with docker-compose
```

### Development Dependencies
```go
// âœ… DO: Use go.mod for dependency management
module coolify-go

go 1.21

require (
    github.com/gin-gonic/gin v1.9.1
    github.com/golang-jwt/jwt/v5 v5.0.0
    gorm.io/gorm v1.25.1
    gorm.io/driver/postgres v1.5.2
)
```

## Production Deployment

### Environment Configuration
```bash
# âœ… DO: Use environment-specific configurations
APP_ENV=production
APP_PORT=8080
DB_HOST=postgres
DB_PORT=5432
DB_NAME=coolify_go
DB_USER=coolify_go
DB_PASSWORD=${DB_PASS}
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=${REDIS_PASS}
JWT_SECRET=${JWT_SECRET}
```

### Health Monitoring
```go
// âœ… DO: Implement comprehensive health checks
func healthHandler(c *gin.Context) {
    c.JSON(200, gin.H{
        "status":    "healthy",
        "version":   Version,
        "buildTime": BuildTime,
        "commit":    GitCommit,
        "timestamp": time.Now().UTC(),
        "database":  "connected",
    })
}
```

## Security Patterns

### Secure Installation
```bash
# âœ… DO: Generate secure secrets during installation
JWT_SECRET=$(openssl rand -hex 32)
DB_PASS=$(openssl rand -hex 16)
REDIS_PASS=$(openssl rand -hex 16)

# âœ… DO: Set proper file permissions
chmod 600 /data/coolify-go/.env
chown -R coolify:coolify /data/coolify-go
```

### Container Security
```dockerfile
# âœ… DO: Use non-root user in containers
RUN addgroup -g 1001 -S coolify && \
    adduser -S coolify -u 1001 -G coolify
USER coolify

# âœ… DO: Use minimal base images
FROM alpine:latest
RUN apk --no-cache add ca-certificates curl
```

## Error Handling

### Installation Error Recovery
```bash
# âœ… DO: Implement rollback on installation failure
if ! docker-compose up -d; then
    echo "Installation failed, rolling back..."
    docker-compose down
    rm -rf /data/coolify-go
    exit 1
fi
```

### Update Error Handling
```bash
# âœ… DO: Rollback on update failure
if ! curl -sf http://localhost:8080/health > /dev/null; then
    echo "Update failed, rolling back..."
    docker stop coolify-go
    docker rm coolify-go
    docker run -d --name coolify-go --restart unless-stopped \
        -p 8080:8080 "coolify-go:$CURRENT_VERSION"
fi
```

## Monitoring & Logging

### Installation Logging
```bash
# âœ… DO: Log installation steps for debugging
echo -e "${BLUE}ðŸ“¦ Installing Docker...${NC}"
if ! command -v docker >/dev/null 2>&1; then
    curl -fsSL https://get.docker.com | sh
    echo -e "${GREEN}âœ… Docker installed successfully${NC}"
else
    echo -e "${GREEN}âœ… Docker already installed${NC}"
fi
```

### Health Check Integration
```bash
# âœ… DO: Wait for service readiness
for i in {1..60}; do
    if curl -sf http://localhost:8080/health >/dev/null 2>&1; then
        echo -e "${GREEN}âœ… Service is ready!${NC}"
        break
    fi
    echo -n "."
    sleep 2
done
```

## Distribution Patterns

### Release Artifacts
```bash
# âœ… DO: Create comprehensive release packages
./scripts/release.sh v1.4.0

# Creates:
# - Multi-platform binaries
# - Docker images
# - Release notes
# - Checksums
# - GitHub release
```

### Installation Methods
```bash
# âœ… DO: Support multiple installation methods
# 1. One-liner installation
curl -fsSL https://raw.githubusercontent.com/s3ig8u/coolify-go-version/main/go-src/install.sh | bash

# 2. Docker installation
docker run -d --name coolify-go --restart unless-stopped -p 8080:8080 coolify-go:latest

# 3. Binary installation
curl -L -o coolify-go https://releases.coolify.io/v1.4.0/coolify-go-v1.4.0-linux-amd64
chmod +x coolify-go
./coolify-go
```

## Testing Installation

### Installation Testing
```bash
# âœ… DO: Test installation in clean environment
./test-install.sh

# Tests:
# - Fresh system installation
# - Dependency installation
# - Service startup
# - Health check validation
# - Configuration verification
```

### Update Testing
```bash
# âœ… DO: Test update process
# 1. Install previous version
# 2. Run update script
# 3. Verify new version
# 4. Check data integrity
# 5. Validate functionality
```

## Documentation

### Installation Documentation
```markdown
# âœ… DO: Provide comprehensive installation docs
## Quick Start
```bash
curl -fsSL https://raw.githubusercontent.com/s3ig8u/coolify-go-version/main/go-src/install.sh | bash
```

## Manual Installation
1. Install Docker
2. Clone repository
3. Build image
4. Configure environment
5. Start services

## Troubleshooting
- Check Docker status
- Verify port availability
- Review logs
- Validate configuration
```

### Update Documentation
```markdown
# âœ… DO: Document update procedures
## Automatic Update
```bash
curl -fsSL https://raw.githubusercontent.com/s3ig8u/coolify-go-version/main/go-src/update.sh | bash
```

## Manual Update
1. Backup current installation
2. Pull new image
3. Update configuration
4. Restart services
5. Verify functionality
```

## Best Practices Summary

### Installation
- **Registry-first strategy** with source fallback
- **Multi-platform support** for all target architectures
- **Secure secret generation** during installation
- **Comprehensive error handling** with rollback capability
- **Health check validation** before completion

### Updates
- **Automated backup** before updates
- **Zero-downtime deployment** with health checks
- **Version tracking** and rollback capability
- **Configuration preservation** across updates
- **Comprehensive logging** for troubleshooting

### Development
- **Makefile-based** development workflow
- **Docker Compose** for local development
- **Multi-stage builds** for optimized images
- **Version embedding** in binaries
- **Comprehensive testing** of installation process

### Production
- **Environment-specific** configurations
- **Security hardening** with proper permissions
- **Monitoring integration** with health checks
- **Backup strategies** for data protection
- **Documentation** for maintenance and troubleshooting
