---
description: 
globs: 
alwaysApply: false
---
# Coolify Go Application Architecture

## Go Project Structure

### **Core Application Directory** ([internal/](mdc:internal))

```
internal/
├── auth/              # Authentication and authorization
├── config/            # Configuration management
├── handlers/          # HTTP request handlers
├── middleware/        # HTTP middleware
├── models/            # Data models and database entities
├── repository/        # Data access layer (repository pattern)
├── routes/            # Route definitions
├── services/          # Business logic services
├── utils/             # Utility functions
└── websocket/         # WebSocket handling
```

### **Public Packages** ([pkg/](mdc:pkg))
```
pkg/
├── docker/            # Docker client and operations
├── git/               # Git repository operations
├── ssh/               # SSH connection management
└── validator/         # Input validation utilities
```

### **Application Entry Points** ([cmd/](mdc:cmd))
```
cmd/
├── server/            # Main server application
│   └── main.go        # Server entry point
└── cli/               # Command-line tools
    └── main.go        # CLI entry point
```

### **Web Assets** ([web/](mdc:web))
```
web/
├── static/            # Static assets (CSS, JS, images)
├── templates/         # HTML templates
└── assets/            # Build assets
```

## Core Domain Models

### **Infrastructure Management**

#### **[Server](mdc:internal/models/server.go)**
- **Purpose**: Physical/virtual server management
- **Key Relationships**:
  - `hasMany(Application)` - Deployed applications
  - `hasMany(StandalonePostgresql)` - Database instances
  - `belongsTo(Team)` - Team ownership
- **Key Features**:
  - SSH connection management
  - Resource monitoring
  - Proxy configuration (Traefik/Caddy)
  - Docker daemon interaction

```go
type Server struct {
    BaseModel
    Name                string    `json:"name" gorm:"not null"`
    Description         string    `json:"description"`
    IPAddress           string    `json:"ip_address" gorm:"not null"`
    Port                int       `json:"port" gorm:"default:22"`
    Username            string    `json:"username" gorm:"not null"`
    SSHKeyID            uuid.UUID `json:"ssh_key_id"`
    Status              string    `json:"status" gorm:"default:'unreachable'"`
    OSType              string    `json:"os_type"`
    OSVersion           string    `json:"os_version"`
    DockerVersion       string    `json:"docker_version"`
    CPUCount            int       `json:"cpu_count"`
    MemoryMB            int       `json:"memory_mb"`
    DiskGB              int       `json:"disk_gb"`
    LastPingAt          *time.Time `json:"last_ping_at"`
    
    // Relationships
    TeamID              uuid.UUID `json:"team_id"`
    Team                Team      `json:"team" gorm:"foreignKey:TeamID"`
    Applications        []Application `json:"applications" gorm:"foreignKey:ServerID"`
    SSHKey              PrivateKey `json:"ssh_key" gorm:"foreignKey:SSHKeyID"`
}
```

#### **[Application](mdc:internal/models/application.go)**
- **Purpose**: Application deployment and management
- **Key Relationships**:
  - `belongsTo(Server)` - Deployment target
  - `belongsTo(Environment)` - Environment context
  - `hasMany(ApplicationDeploymentQueue)` - Deployment history
- **Key Features**:
  - Git repository integration
  - Docker build and deployment
  - Environment variable management
  - SSL certificate handling

```go
type Application struct {
    BaseModel
    Name                string                 `json:"name" gorm:"not null;uniqueIndex"`
    Description         string                 `json:"description"`
    FQDN                string                 `json:"fqdn"`
    GitRepository       string                 `json:"git_repository"`
    GitBranch           string                 `json:"git_branch" gorm:"default:'main'"`
    BuildPack           string                 `json:"build_pack"`
    Port                int                    `json:"port"`
    EnvironmentVars     datatypes.JSON         `json:"environment_variables"`
    Status              string                 `json:"status" gorm:"default:'stopped'"`
    ContainerID         string                 `json:"container_id"`
    LastDeploymentID    uuid.UUID              `json:"last_deployment_id"`
    
    // Relationships
    ServerID            uuid.UUID              `json:"server_id"`
    Server              Server                 `json:"server" gorm:"foreignKey:ServerID"`
    EnvironmentID       uuid.UUID              `json:"environment_id"`
    Environment         Environment            `json:"environment" gorm:"foreignKey:EnvironmentID"`
    Deployments         []ApplicationDeploymentQueue `json:"deployments" gorm:"foreignKey:ApplicationID"`
    EnvironmentVariables []EnvironmentVariable `json:"environment_variables" gorm:"foreignKey:ApplicationID"`
}
```

#### **[Service](mdc:internal/models/service.go)**
- **Purpose**: Multi-container service orchestration
- **Key Relationships**:
  - `hasMany(ServiceApplication)` - Service components
  - `hasMany(ServiceDatabase)` - Service databases
  - `belongsTo(Environment)` - Environment context
- **Key Features**:
  - Docker Compose generation
  - Service dependency management
  - Health check configuration

### **Team & Project Organization**

#### **[Team](mdc:internal/models/team.go)**
- **Purpose**: Multi-tenant team management
- **Key Relationships**:
  - `hasMany(User)` - Team members
  - `hasMany(Project)` - Team projects
  - `hasMany(Server)` - Team servers
- **Key Features**:
  - Resource limits and quotas
  - Team-based access control
  - Subscription management

```go
type Team struct {
    BaseModel
    Name                string     `json:"name" gorm:"not null"`
    Slug                string     `json:"slug" gorm:"uniqueIndex;not null"`
    Description         string     `json:"description"`
    AvatarURL           string     `json:"avatar_url"`
    SubscriptionPlan    string     `json:"subscription_plan" gorm:"default:'free'"`
    SubscriptionEndsAt  *time.Time `json:"subscription_ends_at"`
    
    // Relationships
    Members             []TeamMember   `json:"members" gorm:"foreignKey:TeamID"`
    Projects            []Project      `json:"projects" gorm:"foreignKey:TeamID"`
    Servers             []Server       `json:"servers" gorm:"foreignKey:TeamID"`
}
```

#### **[Project](mdc:internal/models/project.go)**
- **Purpose**: Project organization and grouping
- **Key Relationships**:
  - `hasMany(Environment)` - Project environments
  - `belongsTo(Team)` - Team ownership
- **Key Features**:
  - Environment isolation
  - Resource organization

#### **[Environment](mdc:internal/models/environment.go)**
- **Purpose**: Environment-specific configuration
- **Key Relationships**:
  - `hasMany(Application)` - Environment applications
  - `hasMany(Service)` - Environment services
  - `belongsTo(Project)` - Project context

### **Database Management Models**

#### **Standalone Database Models**
- **[StandalonePostgresql](mdc:internal/models/standalone_postgresql.go)**
- **[StandaloneMysql](mdc:internal/models/standalone_mysql.go)**
- **[StandaloneMariadb](mdc:internal/models/standalone_mariadb.go)**
- **[StandaloneMongodb](mdc:internal/models/standalone_mongodb.go)**
- **[StandaloneRedis](mdc:internal/models/standalone_redis.go)**
- **[StandaloneKeydb](mdc:internal/models/standalone_keydb.go)**
- **[StandaloneDragonfly](mdc:internal/models/standalone_dragonfly.go)**
- **[StandaloneClickhouse](mdc:internal/models/standalone_clickhouse.go)**

**Common Features**:
- Database configuration management
- Backup scheduling and execution
- Connection string generation
- Health monitoring

### **Configuration & Settings**

#### **[EnvironmentVariable](mdc:internal/models/environment_variable.go)**
- **Purpose**: Application environment variable management
- **Key Features**:
  - Encrypted value storage
  - Build-time vs runtime variables
  - Shared variable inheritance

#### **[InstanceSettings](mdc:internal/models/instance_settings.go)**
- **Purpose**: Global Coolify instance configuration
- **Key Features**:
  - FQDN and port configuration
  - Auto-update settings
  - Security configurations

## Architectural Patterns

### **Clean Architecture**

#### **Domain Layer** ([internal/models/](mdc:internal/models))
```go
// Core business entities
type Application struct {
    // Domain logic and business rules
}

func (a *Application) Deploy() error {
    // Business logic for deployment
    return nil
}

func (a *Application) Validate() error {
    // Business validation rules
    return nil
}
```

#### **Repository Layer** ([internal/repository/](mdc:internal/repository))
```go
// Data access abstraction
type ApplicationRepository interface {
    Create(ctx context.Context, app *Application) error
    GetByID(ctx context.Context, id uuid.UUID) (*Application, error)
    GetByTeam(ctx context.Context, teamID uuid.UUID) ([]*Application, error)
    Update(ctx context.Context, app *Application) error
    Delete(ctx context.Context, id uuid.UUID) error
}

// GORM implementation
type GORMApplicationRepository struct {
    db *gorm.DB
}

func (r *GORMApplicationRepository) Create(ctx context.Context, app *Application) error {
    return r.db.WithContext(ctx).Create(app).Error
}
```

#### **Service Layer** ([internal/services/](mdc:internal/services))
```go
// Business logic services
type ApplicationService struct {
    repo    ApplicationRepository
    docker  DockerService
    git     GitService
}

func (s *ApplicationService) CreateApplication(ctx context.Context, req *CreateApplicationRequest, userID uuid.UUID) (*Application, error) {
    // Business logic for creating application
    app := &Application{
        Name:          req.Name,
        GitRepository: req.GitRepository,
        // ... other fields
    }
    
    if err := s.repo.Create(ctx, app); err != nil {
        return nil, err
    }
    
    return app, nil
}

func (s *ApplicationService) DeployApplication(ctx context.Context, appID uuid.UUID) error {
    app, err := s.repo.GetByID(ctx, appID)
    if err != nil {
        return err
    }
    
    // Business logic for deployment
    return s.docker.BuildAndDeploy(ctx, app)
}
```

#### **Handler Layer** ([internal/handlers/](mdc:internal/handlers))
```go
// HTTP request handlers
type ApplicationHandler struct {
    service *ApplicationService
}

func (h *ApplicationHandler) Create(c *gin.Context) {
    var req CreateApplicationRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        c.JSON(400, gin.H{"error": "Invalid request"})
        return
    }
    
    user := c.MustGet("user").(*User)
    app, err := h.service.CreateApplication(c.Request.Context(), &req, user.ID)
    if err != nil {
        c.JSON(500, gin.H{"error": err.Error()})
        return
    }
    
    c.JSON(201, gin.H{"data": app})
}
```

### **Dependency Injection**

#### **Service Container**
```go
// Service container for dependency injection
type Container struct {
    DB              *gorm.DB
    Redis           *redis.Client
    AuthService     *AuthService
    UserService     *UserService
    ApplicationService *ApplicationService
    ServerService   *ServerService
    DockerService   *DockerService
    GitService      *GitService
}

func NewContainer(config *Config) *Container {
    db := initDatabase(config)
    redis := initRedis(config)
    
    return &Container{
        DB:              db,
        Redis:           redis,
        AuthService:     NewAuthService(db, redis),
        UserService:     NewUserService(db),
        ApplicationService: NewApplicationService(db),
        ServerService:   NewServerService(db),
        DockerService:   NewDockerService(config),
        GitService:      NewGitService(),
    }
}
```

### **Middleware Pattern**
```go
// HTTP middleware for cross-cutting concerns
func AuthMiddleware(authService *AuthService) gin.HandlerFunc {
    return func(c *gin.Context) {
        token := c.GetHeader("Authorization")
        if token == "" {
            c.JSON(401, gin.H{"error": "Unauthorized"})
            c.Abort()
            return
        }
        
        user, err := authService.ValidateToken(token)
        if err != nil {
            c.JSON(401, gin.H{"error": "Invalid token"})
            c.Abort()
            return
        }
        
        c.Set("user", user)
        c.Next()
    }
}

func TeamAccessMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        user := c.MustGet("user").(*User)
        teamID := c.Param("teamId")
        
        if !user.HasTeamAccess(teamID) {
            c.JSON(403, gin.H{"error": "Access denied"})
            c.Abort()
            return
        }
        
        c.Set("teamId", teamID)
        c.Next()
    }
}
```

## Data Flow Architecture

### **Request Lifecycle**

1. **HTTP Request** → [internal/routes/](mdc:internal/routes)
2. **Middleware** → Authentication, authorization, logging
3. **Handler** → [internal/handlers/](mdc:internal/handlers)
4. **Service** → Business logic execution
5. **Repository** → Data persistence
6. **Response** → JSON/HTML response

### **Background Processing**

1. **Job Dispatch** → Queue system (Redis)
2. **Job Processing** → Goroutine-based workers
3. **Service Execution** → Business logic
4. **Event Broadcasting** → WebSocket updates
5. **Notification** → User feedback

## Security Architecture

### **Multi-Tenant Isolation**

```go
// Team-based query scoping
func (a *Application) ScopeByTeam(db *gorm.DB, teamID uuid.UUID) *gorm.DB {
    return db.
        Joins("JOIN environments ON applications.environment_id = environments.id").
        Joins("JOIN projects ON environments.project_id = projects.id").
        Where("projects.team_id = ?", teamID)
}

// Usage in repository
func (r *GORMApplicationRepository) GetByTeam(ctx context.Context, teamID uuid.UUID) ([]*Application, error) {
    var apps []*Application
    err := r.db.WithContext(ctx).Scopes(Application{}.ScopeByTeam(r.db, teamID)).Find(&apps).Error
    return apps, err
}
```

### **Authorization Patterns**

```go
// Role-based authorization
type Role string

const (
    RoleOwner  Role = "owner"
    RoleAdmin  Role = "admin"
    RoleMember Role = "member"
    RoleViewer Role = "viewer"
)

func (u *User) HasTeamRole(teamID uuid.UUID, role Role) bool {
    for _, member := range u.TeamMembers {
        if member.TeamID == teamID && member.Role == string(role) {
            return true
        }
    }
    return false
}

func (u *User) HasTeamPermission(teamID uuid.UUID, permission string) bool {
    // Check user's role and permissions
    return true
}
```

## Configuration Management

### **Environment Configuration**
```go
// Configuration structure
type Config struct {
    Server   ServerConfig   `json:"server"`
    Database DatabaseConfig `json:"database"`
    Redis    RedisConfig    `json:"redis"`
    Auth     AuthConfig     `json:"auth"`
    Docker   DockerConfig   `json:"docker"`
    Logging  LoggingConfig  `json:"logging"`
}

type ServerConfig struct {
    Host         string        `json:"host" env:"HOST" default:"0.0.0.0"`
    Port         int           `json:"port" env:"PORT" default:"8080"`
    ReadTimeout  time.Duration `json:"read_timeout" env:"READ_TIMEOUT" default:"30s"`
    WriteTimeout time.Duration `json:"write_timeout" env:"WRITE_TIMEOUT" default:"30s"`
}

// Configuration loading
func LoadConfig() (*Config, error) {
    config := &Config{}
    
    if err := envconfig.Process("", config); err != nil {
        return nil, err
    }
    
    return config, nil
}
```

## Error Handling

### **Custom Error Types**
```go
// Domain-specific errors
type ApplicationError struct {
    Code    string `json:"code"`
    Message string `json:"message"`
    Details map[string]interface{} `json:"details,omitempty"`
}

func (e *ApplicationError) Error() string {
    return e.Message
}

var (
    ErrApplicationNotFound = &ApplicationError{
        Code:    "APPLICATION_NOT_FOUND",
        Message: "Application not found",
    }
    
    ErrDeploymentFailed = &ApplicationError{
        Code:    "DEPLOYMENT_FAILED",
        Message: "Application deployment failed",
    }
)
```

### **Error Handling Middleware**
```go
func ErrorHandlerMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        c.Next()
        
        if len(c.Errors) > 0 {
            err := c.Errors.Last()
            
            // Log the error
            logger.Error("Request error",
                zap.Error(err.Err),
                zap.String("path", c.Request.URL.Path),
                zap.String("method", c.Request.Method),
            )
            
            // Return appropriate error response
            c.JSON(500, gin.H{
                "error": "Internal server error",
                "trace_id": c.GetString("trace_id"),
            })
        }
    }
}
```

## Testing Architecture

### **Unit Testing**
```go
// Service layer testing
func TestApplicationService_CreateApplication(t *testing.T) {
    // Setup
    mockRepo := &MockApplicationRepository{}
    service := NewApplicationService(mockRepo)
    
    // Test data
    req := &CreateApplicationRequest{
        Name: "test-app",
        GitRepository: "https://github.com/user/repo.git",
    }
    
    // Expectations
    mockRepo.On("Create", mock.Anything, mock.AnythingOfType("*Application")).Return(nil)
    
    // Execute
    app, err := service.CreateApplication(context.Background(), req, uuid.New())
    
    // Assert
    assert.NoError(t, err)
    assert.NotNil(t, app)
    assert.Equal(t, req.Name, app.Name)
    mockRepo.AssertExpectations(t)
}
```

### **Integration Testing**
```go
// Database integration testing
func TestApplicationRepository_Integration(t *testing.T) {
    // Setup test database
    db := setupTestDB(t)
    repo := NewGORMApplicationRepository(db)
    
    // Test data
    app := &Application{
        Name: "test-app",
        GitRepository: "https://github.com/user/repo.git",
    }
    
    // Execute
    err := repo.Create(context.Background(), app)
    
    // Assert
    assert.NoError(t, err)
    assert.NotNil(t, app.ID)
    
    // Cleanup
    cleanupTestDB(t, db)
}
```
