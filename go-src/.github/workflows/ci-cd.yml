name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: s3ig8u/coolify-go

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
      working-directory: ./go-src
    
    - name: Run tests
      run: go test -v ./...
      working-directory: ./go-src
    
    - name: Run security check
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './go-src/...'

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image: ${{ steps.image.outputs.image }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Generate version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)-${GITHUB_SHA::8}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
    
    - name: Build binaries
      run: |
        chmod +x ./scripts/build.sh
        ./scripts/build.sh ${{ steps.version.outputs.version }}
      working-directory: ./go-src
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ steps.version.outputs.version }}
        path: go-src/dist/
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      id: image
      run: |
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        docker build \
          --build-arg VERSION="${{ steps.version.outputs.version }}" \
          --build-arg BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          --build-arg GIT_COMMIT="${{ github.sha }}" \
          -t "${IMAGE_TAG}" \
          -t "${LATEST_TAG}" \
          ./go-src
        
        docker push "${IMAGE_TAG}"
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          docker push "${LATEST_TAG}"
        fi
        
        echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying ${{ needs.build.outputs.version }} to staging"
        echo "Image: ${{ needs.build.outputs.image }}"
        # Add your staging deployment logic here
        # e.g., kubectl, docker-compose, API calls, etc.

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying ${{ needs.build.outputs.version }} to production"
        echo "Image: ${{ needs.build.outputs.image }}"
        # Add your production deployment logic here

  release:
    needs: [build, deploy-production]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries-${{ needs.build.outputs.version }}
        path: ./dist
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      run: |
        for file in ./dist/*; do
          echo "Uploading $file"
          # Upload each binary to the release
        done
